import React, { useState } from 'react';
import { Button, Table, Modal, Form } from 'react-bootstrap';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

const PostOffices = () => {
  const postOffices = [
    { id: 1, postOffice: 'Post Office 1', city: 'Mumbai', address: '123 Main St.', state: 'Maharashtra', pincode: '400001', year: 2023 },
    { id: 2, postOffice: 'Post Office 2', city: 'Delhi', address: '456 Central Rd.', state: 'Delhi', pincode: '110001', year: 2022 },
    { id: 3, postOffice: 'Post Office 3', city: 'Chennai', address: '789 South St.', state: 'Tamil Nadu', pincode: '600002', year: 2023 },
    // Add more post offices with year information
  ];

  const [selectedPostOffice, setSelectedPostOffice] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [searchText, setSearchText] = useState('');

  const filteredPostOffices = searchText
    ? postOffices.filter((office) => {
        const searchLower = searchText.toLowerCase();
        return (
          String(office.year).toLowerCase().includes(searchLower) ||
          office.postOffice.toLowerCase().includes(searchLower) ||
          office.city.toLowerCase().includes(searchLower)
        );
      })
    : postOffices;

  const handleViewReport = (postOffice) => {
    setSelectedPostOffice(postOffice);
    setShowModal(true);
  };

  const handleCloseModal = () => {
    setShowModal(false);
  };

  const generatePDF = (postOffice) => {
    const doc = new jsPDF();

    // Title and Post Office Info
    doc.setFontSize(18);
    doc.text('Business Responsibility and Sustainability Report', 14, 22);
    doc.setFontSize(14);
    doc.text(`Post Office Name: ${postOffice.postOffice}`, 14, 30);
    doc.text(`Address: ${postOffice.address}, ${postOffice.city}, ${postOffice.state} - ${postOffice.pincode}`, 14, 36);

    // Section A: General Disclosures
    doc.setFontSize(16);
    doc.text('SECTION A: GENERAL DISCLOSURES', 14, 46);

    autoTable(doc, {
      startY: 52,
      head: [['Details', 'Information']],
      body: [
        ['CIN', 'L12345ABC98765'],
        ['Name of the Listed Entity', postOffice.postOffice],
        ['Year of Incorporation', '2001'],
        ['Registered Office Address', postOffice.address],
        ['Corporate Office Address', postOffice.address],
        ['Email', 'postoffice@domain.com'],
        ['Telephone', '+91 12345 67890'],
        ['Website', 'www.postoffice.com'],
        ['Financial Year for Reporting', '2023-2024'],
        ['Paid-up Capital', 'â‚¹100 Crore'],
      ],
    });

    // Section B: Sustainability Information
    doc.setFontSize(16);
    doc.text('SECTION B: SUSTAINABILITY INFORMATION', 14, doc.lastAutoTable.finalY + 10);

    autoTable(doc, {
      startY: doc.lastAutoTable.finalY + 15,
      head: [['Metric', 'Details']],
      body: [
        ['CSR Activities', 'Clean Energy Projects, Education Programs'],
        ['Energy Consumption', '2000 KWh per year'],
        ['Water Usage', '5000 liters per month'],
        ['Waste Management', 'Recycling and proper disposal of hazardous materials'],
        ['Employee Health & Safety', '100% Health Coverage, Regular Safety Audits'],
      ],
    });

    // Final touches for official formatting
    doc.setFontSize(12);
    doc.text('Report Generated by Post Office', 14, doc.lastAutoTable.finalY + 20);
    doc.text('Contact Information: postoffice@domain.com | +91 12345 67890', 14, doc.lastAutoTable.finalY + 26);

    // Save the PDF
    doc.save(`${postOffice.postOffice}_BRSR_Report.pdf`);
  };

  return (
    <div className="post-office-container">
      <h1>Post Office Yearly Reports</h1>
      <div className="search-bar">
        <input type="text" placeholder="Search by year, post office, or city" value={searchText} onChange={(e) => setSearchText(e.target.value)} />
      </div>
      <div className="table-container">
        <Table striped bordered hover>
          <thead>
            <tr>
              <th>#</th>
              <th>Post Office</th>
              <th>City</th>
              <th>Year</th>
              <th>View</th>
              <th>Download PDF</th>
            </tr>
          </thead>
          <tbody>
            {filteredPostOffices.map((postOffice, index) => (
              <tr key={postOffice.id}>
                <td>{index + 1}</td>
                <td>{postOffice.postOffice}</td>
                <td>{postOffice.city}</td>
                <td>{postOffice.year}</td>
                <td>
                  <Button variant="primary" onClick={() => handleViewReport(postOffice)}>
                    View
                  </Button>
                </td>
                <td>
                  <Button variant="success" onClick={() => generatePDF(postOffice)}>
                    Download PDF
                  </Button>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      </div>

      <Modal show={showModal} onHide={handleCloseModal}>
        <Modal.Header closeButton>
          <Modal.Title>Post Office Report</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {selectedPostOffice ? (
            <>
              <p><strong>Post Office:</strong> {selectedPostOffice.postOffice}</p>
              <p><strong>City:</strong> {selectedPostOffice.city}</p>
              <p><strong>Address:</strong> {selectedPostOffice.address}, {selectedPostOffice.state} - {selectedPostOffice.pincode}</p>
              <p><strong>Details:</strong> Business Responsibility and Sustainability Information will be included here.</p>
            </>
          ) : (
            <p>No data available.</p>
          )}
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={handleCloseModal}>
            Close
          </Button>
        </Modal.Footer>
      </Modal>
    </div>
  );
};

export default PostOffices;