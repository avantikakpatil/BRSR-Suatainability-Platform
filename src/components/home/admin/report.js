import React, { useState, useEffect } from "react";
import { Button, Table } from "react-bootstrap";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import { db, auth } from '../../../firebaseConfig';
import { ref, onValue, get, child } from 'firebase/database';
import { onAuthStateChanged } from 'firebase/auth';

const PostOffices = () => {
  const [profileData, setProfileData] = useState(null);
  const [currentUser, setCurrentUser] = useState(null);
  const [searchText, setSearchText] = useState("");
  const [postOffices, setPostOffices] = useState([]);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        setCurrentUser(user);
        const sanitizedEmail = user.email.replace(/\./g, '_').replace(/@/g, '_');
        fetchProfileData(sanitizedEmail);
      } else {
        console.log('No user is signed in.');
      }
    });

    const postOfficesRef = ref(db, 'postOffices');
    const postOfficesListener = onValue(postOfficesRef, (snapshot) => {
      if (snapshot.exists()) {
        const postOfficesData = [];
        snapshot.forEach((childSnapshot) => {
          const data = childSnapshot.val();
          postOfficesData.push({
            id: childSnapshot.key,
            postOffice: data.details.name,
            city: data.details.address.city,
            address: `${data.details.address.country}, ${data.details.address.state}, ${data.details.address.city}`,
            state: data.details.address.state,
            pincode: data.details.address.pincode,
            type: data.type,
            telephone: data.details.telephone,
            website: data.details.website,
            email: data.details.email,
            year: new Date().getFullYear()
          });
        });
        setPostOffices(postOfficesData);
      }
    });

    return () => {
      unsubscribe();
      postOfficesListener();
    };
  }, []);

  const fetchProfileData = async (sanitizedEmail) => {
    const dbRef = ref(db);
    try {
      const snapshot = await get(child(dbRef, `PostalManager/profile/${sanitizedEmail}`));
      if (snapshot.exists()) {
        setProfileData(snapshot.val());
      } else {
        console.log("No profile data available");
      }
    } catch (error) {
      console.error("Error fetching profile data:", error);
    }
  };

  const filteredPostOffices = searchText
    ? postOffices.filter((office) => {
        const searchLower = searchText.toLowerCase();
        return (
          String(office.year).toLowerCase().includes(searchLower) ||
          office.postOffice.toLowerCase().includes(searchLower) ||
          office.city.toLowerCase().includes(searchLower)
        );
      })
    : postOffices;

  const generatePDF = (postOffice, isForView = false) => {
    const doc = new jsPDF();
    doc.setFontSize(18);
    doc.text("Business Responsibility and Sustainability Report", 14, 22);
    doc.setFontSize(14);
    doc.text(`Post Office Name: ${postOffice.postOffice}`, 14, 30);
    doc.text(
      `Address: ${postOffice.address}`,
      14,
      36
    );

    doc.setFontSize(16);
    doc.text("SECTION A: GENERAL DISCLOSURES", 14, 46);

    autoTable(doc, {
      startY: 52,
      head: [["Details", "Information"]],
      body: [
        ["Post Office Type", postOffice.type],
        ["Name of the Post Office", postOffice.postOffice],
        ["Registered Office Address", postOffice.address],
        ["Email", postOffice.email],
        ["Telephone", postOffice.telephone],
        ["Website", postOffice.website],
        ["Pincode", postOffice.pincode],
        ["State", postOffice.state],
        ["City", postOffice.city]
      ],
    });

    doc.setFontSize(16);
    doc.text(
      "SECTION B: SUSTAINABILITY INFORMATION",
      14,
      doc.lastAutoTable.finalY + 10
    );

    autoTable(doc, {
      startY: doc.lastAutoTable.finalY + 15,
      head: [["Metric", "Details"]],
      body: [
        ["CSR Activities", "Clean Energy Projects, Education Programs"],
        ["Energy Consumption", "2000 KWh per year"],
        ["Water Usage", "5000 liters per month"],
        ["Waste Management", "Recycling and proper disposal of hazardous materials"],
        ["Employee Health & Safety", "100% Health Coverage, Regular Safety Audits"],
      ],
    });

    doc.setFontSize(12);
    doc.text(
      `Report Generated by ${postOffice.postOffice}`,
      14,
      doc.lastAutoTable.finalY + 20
    );
    doc.text(
      `Contact Information: ${postOffice.email} | ${postOffice.telephone}`,
      14,
      doc.lastAutoTable.finalY + 26
    );

    if (isForView) {
      const string = doc.output("bloburl");
      window.open(string);
    } else {
      doc.save(`${postOffice.postOffice}_BRSR_Report.pdf`);
    }
  };

  return (
    <div className="post-office-container" style={{ fontFamily: "Arial, sans-serif", padding: "10px", width: "100%" }}>
      <h1 style={{ fontSize: '28px', fontWeight: 'bold', color: '#333', textAlign: 'center', marginBottom: '20px' }}>
        Post Office Yearly Reports
      </h1>
      {!profileData && (
        <div className="alert alert-warning" style={{ fontSize: '16px', marginBottom: '20px', textAlign: 'center' }}>
          Please complete your profile information in the Admin Form before generating reports.
        </div>
      )}
      <div className="search-bar" style={{ marginBottom: '20px', maxWidth: '600px', margin: '0 auto' }}>
        <input
          type="text"
          placeholder="Search by year, post office, or city"
          value={searchText}
          onChange={(e) => setSearchText(e.target.value)}
          style={{
            padding: '10px',
            width: '100%',
            fontSize: '16px',
            borderRadius: '5px',
            border: '1px solid #ccc',
            boxSizing: 'border-box',
          }}
        />
      </div>
      <div className="table-container" style={{ overflowX: 'auto', marginTop: '20px' }}>
        <Table striped bordered hover responsive="lg" style={{
          fontSize: '16px',
          minWidth: '1200px',
          borderCollapse: 'collapse',
          width: '100%',
        }}>
          <thead style={{ backgroundColor: '#f8f9fa', color: '#495057', borderBottom: '2px solid #ddd' }}>
            <tr>
              <th style={{ padding: '12px', textAlign: 'center' }}>Sr No.</th>
              <th style={{ padding: '12px', textAlign: 'center' }}>Post Office</th>
              <th style={{ padding: '12px', textAlign: 'center' }}>City</th>
              <th style={{ padding: '12px', textAlign: 'center' }}>Type</th>
              <th style={{ padding: '12px', textAlign: 'center' }}>Year</th>
              <th style={{ padding: '12px', textAlign: 'center' }}>View</th>
              <th style={{ padding: '12px', textAlign: 'center' }}>Download PDF</th>
            </tr>
          </thead>
          <tbody>
            {filteredPostOffices.map((postOffice, index) => (
              <tr key={postOffice.id}>
                <td style={{ padding: '10px', textAlign: 'center', border: '1px solid #ddd' }}>{index + 1}</td>
                <td style={{ padding: '10px', textAlign: 'center', border: '1px solid #ddd' }}>{postOffice.postOffice}</td>
                <td style={{ padding: '10px', textAlign: 'center', border: '1px solid #ddd' }}>{postOffice.city}</td>
                <td style={{ padding: '10px', textAlign: 'center', border: '1px solid #ddd' }}>{postOffice.type}</td>
                <td style={{ padding: '10px', textAlign: 'center', border: '1px solid #ddd' }}>{postOffice.year}</td>
                <td style={{ padding: '10px', textAlign: 'center', border: '1px solid #ddd' }}>
                  <Button
                    variant="primary"
                    onClick={() => generatePDF(postOffice, true)}
                    style={{
                      backgroundColor: "#3d89da",
                      borderRadius: '5px',
                      padding: '8px 15px',
                      fontSize: '16px',
                    }}
                  >
                    View
                  </Button>
                </td>
                <td style={{ padding: '10px', textAlign: 'center', border: '1px solid #ddd' }}>
                  <Button
                    variant="success"
                    onClick={() => generatePDF(postOffice)}
                    style={{
                      backgroundColor: "#28a745",
                      borderRadius: '5px',
                      padding: '8px 15px',
                      fontSize: '16px',
                    }}
                  >
                    Download PDF
                  </Button>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      </div>
    </div>
  );
};

export default PostOffices;
